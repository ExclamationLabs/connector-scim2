<functionLibrary xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3" xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3" xmlns:icfs="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3" xmlns:org="http://midpoint.evolveum.com/xml/ns/public/common/org-3" xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3" xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3" xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" oid="00000000-0000-0000-0000-100000000000" version="3" >
    <name>provision</name>
    <description>Functions common scripts by ProvisionIAM</description>
    <iteration>0</iteration>
    <iterationToken/>
	<function>
        <name>jsonComposer</name>
        <parameter xsi:type="c:ExpressionParameterType">
            <name>map</name>
            <type xmlns:xsd="http://www.w3.org/2001/XMLSchema">xsd:anyType</type>
        </parameter>
        <returnType xmlns:xsd="http://www.w3.org/2001/XMLSchema">xsd:string</returnType>
        <script>
            <code>
                jsonArray = []
                jsonMap = '{'

                map.each{ key, value -&gt;
                    jsonArray += '"' + key + '": "' + value + '"'
                }

                jsonMap += jsonArray.join(",") + '}'

                log.error("JSON_MAP: {}", jsonMap)

                return jsonMap
            </code>
        </script>
    </function>
    <function>
        <name>jsonParser</name>
        <parameter xsi:type="c:ExpressionParameterType">
            <name>response</name>
            <type xmlns:xsd="http://www.w3.org/2001/XMLSchema">xsd:string</type>
        </parameter>
        <parameter xsi:type="c:ExpressionParameterType">
            <name>primary</name>
            <type xmlns:xsd="http://www.w3.org/2001/XMLSchema">xsd:string</type>
        </parameter>
        <parameter xsi:type="c:ExpressionParameterType">
            <name>type</name>
            <type xmlns:xsd="http://www.w3.org/2001/XMLSchema">xsd:string</type>
        </parameter>
        <parameter xsi:type="c:ExpressionParameterType">
            <name>group</name>
            <type xmlns:xsd="http://www.w3.org/2001/XMLSchema">xsd:boolean</type>
        </parameter>
        <returnType xmlns:xsd="http://www.w3.org/2001/XMLSchema">xsd:string</returnType>
        <script>
            <code>
                import groovy.json.JsonSlurper
                jsonSlurper = new JsonSlurper()

                if(response == null || response == ""){
                    return null
                }

                // Store parsed response in a collection to make use of Groovy's findAll closure
                data = [jsonSlurper.parseText(response)]

                // If there is no value or value is an empty string, return null
                if(data?.value == null || data?.value == ''){
                    return null
                }

                // Groups and Roles don't have type or primary, just id and displayName
                if(group){
                    return data.value
                }

                // return the item found, or null if nothing is found
                return data.findAll{it?.primary?.toString() == primary || it?.type == type}?.value
            </code>
        </script>
    </function>
</functionLibrary>
